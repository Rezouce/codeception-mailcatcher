<?php  //[STAMP] 42109e583aa5c4ff6b993f6e04e3de22
namespace _generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

use Helper\Functional;
use Codeception\Module\MailCatcher;

trait FunctionalTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Remove all emails in MailCatcher.
     * @see \Codeception\Module\MailCatcher::removeEmails()
     */
    public function removeEmails() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('removeEmails', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Assert that there is at least one email.
     * @param MailCollection $emails
     * @see \Codeception\Module\MailCatcher::hasEmails()
     */
    public function hasEmails($emails = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('hasEmails', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Assert the number of emails sent.
     *
     * @param int $count
     * @param MailCollection $emails
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MailCatcher::seeNumberEmails()
     */
    public function canSeeNumberEmails($count, $emails = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeNumberEmails', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Assert the number of emails sent.
     *
     * @param int $count
     * @param MailCollection $emails
     * @see \Codeception\Module\MailCatcher::seeNumberEmails()
     */
    public function seeNumberEmails($count, $emails = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeNumberEmails', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Assert that at least an email contains some text.
     *
     * @param string $expected
     * @param MailCollection $emails
     * Conditional Assertion: Test won't be stopped on fail
     * @see \Codeception\Module\MailCatcher::seeInEmail()
     */
    public function canSeeInEmail($expected, $emails = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInEmail', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Assert that at least an email contains some text.
     *
     * @param string $expected
     * @param MailCollection $emails
     * @see \Codeception\Module\MailCatcher::seeInEmail()
     */
    public function seeInEmail($expected, $emails = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInEmail', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Get all emails with the given subject.
     *
     * @param string $subject
     * @param bool $strict
     * @return MailCollection
     * @see \Codeception\Module\MailCatcher::getEmailsBySubject()
     */
    public function getEmailsBySubject($subject, $strict = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getEmailsBySubject', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Get all emails with the given sender.
     *
     * @param string $sender
     * @param bool $strict
     * @return MailCollection
     * @see \Codeception\Module\MailCatcher::getEmailsBySender()
     */
    public function getEmailsBySender($sender, $strict = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getEmailsBySender', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Get all emails with the given recipients.
     *
     * @param array $recipients
     * @param bool $strict
     * @return MailCollection
     * @see \Codeception\Module\MailCatcher::getEmailsByRecipients()
     */
    public function getEmailsByRecipients($recipients, $strict = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getEmailsByRecipients', func_get_args()));
    }
}
